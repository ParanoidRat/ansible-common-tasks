# Installs software for RedHat & Debian family from package URL list (dict)
# After download, if provided, verifies file hash value before installation.
#
#  Usage example
#
#  tasks:
#    - include: tasks/task_install-from-pkgs.yml
#      vars:
#        install_from_pkgs_debug: yes
#        install_from_pkgs_cachedir: "/tmp"
#        install_from_pkgs_src: [
#          - url:  "https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm"
#            type: "rpm"
#            hash: ""
#          - url:  "https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-5.5.0-amd64.deb"
#            type: "deb"
#            hash: "sha1:fe65b5242fba0a0360900ea72c3dda362a01ba8c"
---
# Set proper environment type
- name: "Set environment type"
  set_fact:
    os_env: "{% if ansible_os_family=='Debian' %}deb{% elif ansible_os_family=='RedHat' %}rpm{% else %}UNKNOWN{% endif %}"

# Generate list of os-specific packages
- name: "Get OS-specific packages (.{{ os_env }})"
  set_fact:
    src_list: "{{ install_from_pkgs_src | json_query(filter_jq) }}"
  vars:
    filter_jq: "[?type=='{{os_env}}']"

# Download packages to disk if do not exist and verify hash
- name: "Download and verify package"
  get_url:
    url: "{{ item.url }}"
    dest: "{{ install_from_pkgs_cachedir }}/{{ item.url | basename }}"
    checksum: "{{ item.hash }}"
    force: yes
  with_items: "{{ src_list }}"
  loop_control:
    label: "{{ item.url }}"

# Install .deb packages from disk
- name: "Install packages from disk (.deb)"
  apt:
    deb: "{{ install_from_pkgs_cachedir }}/{{ item.url | basename }}"
    state: present
  when: ansible_os_family == "Debian" and not install_from_pkgs_debug
  with_items: "{{ src_list }}"
  loop_control:
    label: "{{ install_from_pkgs_cachedir }}/{{ item.url | basename }}"

# Install .rpm packages from disk
- name: "Install packages from disk (.rpm)"
  yum:
    name: "{{ install_from_pkgs_cachedir }}/{{ item.url | basename }}"
    state: present
  when: ansible_os_family == "RedHat" and not install_from_pkgs_debug
  with_items: "{{ src_list }}"
  loop_control:
    label: "{{ install_from_pkgs_cachedir }}/{{ item.url | basename }}"
