# Copies content from local {{ copy_files_dir_src }} to remote {{ copy_files_dir_dst }}
#     - if {{ copy_files_dir_dst_clear }} == True, deletes {{ copy_files_dir_dst }}
#       prior to copying
#     - ensures that {{ copy_files_dir_dst }} exists
#     - if defined, notifies {{ copy_files_dir_handler }} upon completion
# Expects {{ copy_files_dir_src }} to __end with__ `/`
#
# Usage example
#
#   handlers:
#     - name: restart service
#       debug:
#         msg: Service restarted
#
#   tasks:
#     - import_tasks: task_copy-files-dir.yml
#       vars:
#         copy_files_dir_handler: restart service
#         copy_files_dir_src:   /path/to/local/source/
#         copy_files_dir_dest:  /path/to/remote/target/
#         copy_files_dir_owner: user
#         copy_files_dir_group: group
#         copy_files_dir_mode:  u=rw,g=r,o=r
#
---
- name: "Clear remote destination :: {{ copy_files_dir_dst }}"
  file:
    path: "{{ copy_files_dir_dst }}"
    state: absent
  when: copy_files_dir_dst_clear | default( no )

- name: "Ensure remote destination exists :: {{ copy_files_dir_dst }}"
  file:
    path: "{{ copy_files_dir_dst }}"
    owner: "{{ copy_files_dir_owner }}"
    group: "{{ copy_files_dir_group }}"
    mode: u=rwx,g=rx,o=rx
    state: directory
    recurse: no

- name: "Copy recursively :: {{ copy_files_dir_src.split('/')[-2] }} -> {{ copy_files_dir_dst }}"
  copy:
    src:   "{{ copy_files_dir_src }}"
    dest:  "{{ copy_files_dir_dst }}"
    owner: "{{ copy_files_dir_owner }}"
    group: "{{ copy_files_dir_group }}"
    mode:  "{{ copy_files_dir_mode }}"
  notify: "{{ copy_files_dir_handler | default(omit) }}"
